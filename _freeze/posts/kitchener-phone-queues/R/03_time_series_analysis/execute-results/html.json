{
  "hash": "da3e5bab592fff211581913513982e1f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Call Center Volume Analysis with Prophet\"\nauthor: \"Your Name\"\ndate: \"2025-07-05\"\ndraft: true\noutput: \n  html_document:\n    toc: true\n    toc_float: true\n    theme: cosmo\n    highlight: zenburn\n---\n\n\n\n\n\n\n# Introduction\n\nThis analysis examines call center volume data using Facebook's Prophet forecasting tool. The analysis accounts for:\n\n-   Weekly and monthly seasonality patterns\n\n-   Statutory and school holiday effects\n\n-   COVID-19 lockdown periods\n\n# Data Preparation\n\n## Load Required Libraries\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(prophet)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(here)\nlibrary(scales)\nlibrary(naniar)\n```\n:::\n\n\n\n\n## Create Supporting Datasets\n\nLoad and prepare the data for analysis. The data includes indicators for holidays and COVID lockdown periods.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load and prep queue dataset\nqueue_data <- read_csv(here(\"posts\", \"kitchener-phone-queues\", \"data\", \"queue_data_clean.csv\")) |> \n  add_count(date, name = \"metric_count\") |> \n  filter(metric_count <= 17) |> \n  filter(date >= \"2019-03-01\") |> \n  pivot_wider(names_from = \"metric\", values_from = \"value\") |> \n  clean_names() \n\n# Find missing dates in data period\nall_dates_in_period <- seq.Date(\n  ymd(\"2019-03-01\"), \n  ymd(\"2023-07-31\"), \n  \"days\"\n)\n\n# create missing dates df for binding to prepped Prophet df\nmissing_dates <- tibble(\n  ds = as.Date(setdiff(all_dates_in_period, queue_data$date)),\n  y = NA\n  )\n\n# load and prep holidays dataset\nstat_holidays <- read_csv(here(\"posts\", \"kitchener-phone-queues\", \"data\", \"holidays.csv\")) |> \n  filter(\n    date >= ymd(\"2019-03-01\"),\n    holiday != \"Additional Day\"\n  ) |> \n  rename(ds = date) |> \n  mutate(\n    lower_window = 0,\n    upper_window = 0\n  )\n\n# create covid lockdown dates tibble to include as one-off holidays\nlockdowns <- tribble(\n  ~holiday, ~ds, ~ds_upper,\n  \"lockdown_1\", ymd(\"2020-03-17\"), ymd(\"2020-07-16\"),\n  \"lockdown_2\", ymd(\"2020-12-26\"), ymd(\"2021-02-09\"),\n  \"lockdown_3\", ymd(\"2021-04-08\"), ymd(\"2021-07-15\"),\n  \"lockdown_4\", ymd(\"2022-01-05\"), ymd(\"2022-03-20\")\n) |> \n  mutate(\n    lower_window = 0,\n    upper_window = as.integer(ds_upper - ds)\n  ) |> \n  select(-ds_upper)\n\n# create March break dates tibble to include as holidays\nschool_breaks <- tribble(\n  ~holiday, ~ds, ~lower_window, ~upper_window,\n  \"March Break\", ymd(\"2019-03-11\"), -30, 6,\n  \"March Break\", ymd(\"2020-03-16\"), -30, 6,\n  \"March Break\", ymd(\"2021-03-15\"), -30, 6,  # original (COVID delay to April)\n  \"April Break\", ymd(\"2021-04-12\"), -30, 6,  # actual\n  \"March Break\", ymd(\"2022-03-14\"), -30, 6,\n  \"March Break\", ymd(\"2023-03-13\"), -30, 6,\n  \"March Break\", ymd(\"2024-03-11\"), -30, 6,\n  \"Summer Break\", ymd(\"2019-07-01\"), -45, 61,\n  \"Summer Break\", ymd(\"2020-07-01\"), -45, 61,\n  \"Summer Break\", ymd(\"2021-07-01\"), -45, 61,\n  \"Summer Break\", ymd(\"2022-07-01\"), -45, 61,\n  \"Summer Break\", ymd(\"2023-07-01\"), -45, 61,\n  \"Summer Break\", ymd(\"2024-07-01\"), -45, 61,\n  \"Christmas Break\", ymd(\"2019-12-23\"), -20, 13,\n  \"Christmas Break\", ymd(\"2020-12-21\"), -20, 13,\n  \"Christmas Break\", ymd(\"2021-12-20\"), -20, 13,\n  \"Christmas Break\", ymd(\"2022-12-26\"), -20, 13,\n  \"Christmas Break\", ymd(\"2023-12-25\"), -20, 13,\n)\n\n# consolidate holidays tibble\nholidays <- bind_rows(stat_holidays, lockdowns, school_breaks)\n```\n:::\n\n\n\n\n# Analysis of Calls Presented\n\n## Model Configuration\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare calls presented data for Prophet\ndf_pres <- queue_data |> \n  select(ds = date, y = calls_presented, type_of_day) |> \n  group_by(type_of_day) |> \n  mutate(\n    z_score = abs(scale(y)),\n    y = if_else(z_score < 3, y, NA) # replace outliers with NA\n  ) |> \n  ungroup() |> \n  select(ds, y) |> \n  rbind(missing_dates) |> \n  arrange(ds)\n```\n:::\n\n\n\n\nConfigure the Prophet model with appropriate seasonality settings and external regressors.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create prophet model\nm_pres <- prophet(df_pres, holidays = holidays, seasonality.mode = \"multiplicative\")\n```\n:::\n\n\n\n\n## Model Forecasting\n\nFit the model and generate forecasts.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create future dataframe for predictions\nfuture <- make_future_dataframe(m_pres, periods = 366)\n\n# Generate forecasts\nforecast <- predict(m_pres, future) |> \n  clean_names()\n```\n:::\n\n\n\n\n## Visualization\n\n### Forecast Plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(m_pres, forecast) + add_changepoints_to_plot(m_pres)\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/forecast_plot-1.png){width=960}\n:::\n:::\n\n\n\n\n### Component Plots\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create component plots\nprophet_plot_components(m_pres, forecast)\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/component_plots-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# First add year to both dataframes\ndf_with_year <- df_pres |> \n  mutate(year = year(ds))\n\nholidays_with_year <- school_breaks |> \n  mutate(year = year(ds)) |> \n  rename(break_start = ds)\n\n# Then join by year and calculate days until break\ndf_with_breaks <- df_with_year |> \n  left_join(holidays_with_year, by = \"year\") |> \n  mutate(days_until_break = as.integer(break_start - ds)) |>\n  filter(days_until_break >= -7, days_until_break <= 75)\n\ndf_with_breaks |> \n  ggplot(aes(x = days_until_break, y = y)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(se = FALSE) +\n  facet_wrap(~holiday, scales = \"free_y\") +\n  scale_x_reverse() +  # This reverses the x-axis\n  labs(x = \"Days Until Break Starts\", \n       y = \"Calls Presented\",\n       title = \"Call Volumes Leading Up to School Breaks\",\n       subtitle = \"Day 0 = First day of break\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/school-breaks-impact-1.png){width=960}\n:::\n:::\n\n\n\n\n# Analysis of % of Calls Answered Within 30 Seconds\n\n## Model Configuration\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare  data for Prophet\ndf_hand30 <- queue_data |> \n  select(ds = date, y = percentage_of_service_level_met_with_abandoned_calls_counted_negatively) |> \n  mutate(\n    median_abs_dev = mad(y, na.rm = TRUE),\n    median_val = median(y, na.rm = TRUE),\n    modified_z = abs(0.6745 * (y - median_val) / median_abs_dev),\n    y = if_else(modified_z < 3.5, y, NA) # replace outliers with NA\n  ) |> \n  ungroup() |> \n  select(ds, y) |> \n  rbind(missing_dates) |> \n  arrange(ds)\n\nholidays_hand30 <- holidays |> \n  filter(!holiday %in% c(\"Christmas Break\", \"March Break\", \"April Break\"))\n```\n:::\n\n\n\n\nConfigure the Prophet model with appropriate seasonality settings and external regressors.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create prophet model\nm_hand30 <- prophet(df_hand30, holidays = holidays_hand30, seasonality.mode = \"additive\")\n```\n:::\n\n\n\n\n## Model Forecasting\n\nFit the model and generate forecasts.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create future dataframe for predictions\nfuture <- make_future_dataframe(m_hand30, periods = 366)\n\n# Generate forecasts\nforecast_hand30 <- predict(m_hand30, future) |> \n  clean_names()\n```\n:::\n\n\n\n\n## Visualization\n\n### Forecast Plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(m_hand30, forecast_hand30) + add_changepoints_to_plot(m_hand30)\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/forecast_plot-hand30-1.png){width=960}\n:::\n:::\n\n\n\n\n### Component Plots\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create component plots\nprophet_plot_components(m_hand30, forecast_hand30)\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/component_plots-hand30-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nm_hand30_sub <- m_hand30\n\nm_hand30_sub$history <- m_hand30_sub$history |> \n  filter(ds >= ymd(\"2023-08-01\"))\n\nforecast_hand30_sub <- forecast_hand30 |> \n  filter(ds >= ymd(\"2023-08-01\"))\n\n# Create component plots\nprophet_plot_components(m_hand30_sub, forecast_hand30_sub)\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/component_plots-hand30-subset-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# First add year to both dataframes\ndf_with_year <- df_hand30 |> \n  mutate(year = year(ds))\n\n# Then join by year and calculate days until break\ndf_with_breaks <- df_with_year |> \n  left_join(holidays_with_year, by = \"year\") |> \n  mutate(days_until_break = as.integer(break_start - ds)) |>\n  filter(days_until_break >= -7, days_until_break <= 75)\n\ndf_with_breaks |> \n  ggplot(aes(x = days_until_break, y = y)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(se = FALSE) +\n  facet_wrap(~holiday, scales = \"free_y\") +\n  scale_x_reverse() +  # This reverses the x-axis\n  labs(x = \"Days Until Break Starts\", \n       y = \"% Answered Within 30 Seconds\",\n       title = \"Service Levels Leading Up to School Breaks\",\n       subtitle = \"Day 0 = First day of break\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/break-impact-hand30-1.png){width=960}\n:::\n:::\n\n\n\n\n# Analysis of % of Calls Abandoned\n\n## Model Configuration\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare  data for Prophet\ndf_aband <- queue_data |> \n  select(ds = date, y = percentage_of_calls_abandoned) |> \n  mutate(\n    median_abs_dev = mad(y, na.rm = TRUE),\n    median_val = median(y, na.rm = TRUE),\n    modified_z = abs(0.6745 * (y - median_val) / median_abs_dev),\n    y = if_else(modified_z < 3.5, y, NA) # replace outliers with NA\n  ) |> \n  ungroup() |> \n  select(ds, y) |> \n  rbind(missing_dates) |> \n  arrange(ds)\n\nholidays_aband <- holidays |> \n  filter(!holiday %in% c(\"Christmas Break\", \"March Break\", \"April Break\"))\n```\n:::\n\n\n\n\nConfigure the Prophet model with appropriate seasonality settings and external regressors.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create prophet model\nm_aband <- prophet(df_aband, holidays = holidays_aband, seasonality.mode = \"additive\")\n```\n:::\n\n\n\n\n## Model Forecasting\n\nFit the model and generate forecasts.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create future dataframe for predictions\nfuture <- make_future_dataframe(m_aband, periods = 366)\n\n# Generate forecasts\nforecast_aband <- predict(m_aband, future) |> \n  clean_names()\n```\n:::\n\n\n\n\n## Visualization\n\n### Forecast Plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(m_aband, forecast_aband) + add_changepoints_to_plot(m_aband)\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/forecast_plot-aband-1.png){width=960}\n:::\n:::\n\n\n\n\n### Component Plots\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create component plots\nprophet_plot_components(m_aband, forecast_aband)\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/component_plots_v2-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nm_hand30_sub <- m_hand30\n\nm_hand30_sub$history <- m_hand30_sub$history |> \n  filter(ds >= ymd(\"2023-08-01\"))\n\nforecast_hand30_sub <- forecast_hand30 |> \n  filter(ds >= ymd(\"2023-08-01\"))\n\n# Create component plots\nprophet_plot_components(m_hand30_sub, forecast_hand30_sub)\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/component_plots-subset-aband-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlockdown_1_dates <- seq.Date(ymd(\"2020-03-17\"), ymd(\"2020-07-16\"), \"days\")\nlockdown_2_dates <- seq.Date(ymd(\"2020-12-26\"), ymd(\"2021-02-09\"), \"days\")\nlockdown_3_dates <- seq.Date(ymd(\"2021-04-08\"), ymd(\"2021-07-15\"), \"days\")\nlockdown_4_dates <- seq.Date(ymd(\"2022-01-05\"), ymd(\"2022-03-20\"), \"days\")\n\nis_lockdown_date <- function(ds, lockdown_dates) {\n  ds <- as.Date(ds)\n  return(as.numeric(ds %in% lockdown_dates))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_pres_lockdowns <- df_pres |> \n  mutate(\n    lockdown_1 = is_lockdown_date(ds, lockdown_1_dates),\n    lockdown_2 = is_lockdown_date(ds, lockdown_2_dates),\n    lockdown_3 = is_lockdown_date(ds, lockdown_3_dates),\n    lockdown_4 = is_lockdown_date(ds, lockdown_4_dates)\n  )\n\nholidays_no_lockdowns <- holidays |> \n  filter(!grepl(\"lock\", holiday))\n\nfuture_lockdowns <- future |> \n  mutate(\n    lockdown_1 = is_lockdown_date(ds, lockdown_1_dates),\n    lockdown_2 = is_lockdown_date(ds, lockdown_2_dates),\n    lockdown_3 = is_lockdown_date(ds, lockdown_3_dates),\n    lockdown_4 = is_lockdown_date(ds, lockdown_4_dates)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nm_lockdown <- prophet(\n  holidays = holidays_no_lockdowns, \n  seasonality.mode = \"multiplicative\",\n  mcmc.samples = 1000\n  )\nm_lockdown <- add_regressor(m_lockdown, \"lockdown_1\")\nm_lockdown <- add_regressor(m_lockdown, \"lockdown_2\")\nm_lockdown <- add_regressor(m_lockdown, \"lockdown_3\")\nm_lockdown <- add_regressor(m_lockdown, \"lockdown_4\")\nm_lockdown <- fit.prophet(m_lockdown, df_pres_lockdowns)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nSAMPLING FOR MODEL 'prophet' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 0.000442 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 4.42 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:   1 / 1000 [  0%]  (Warmup)\nChain 1: Iteration: 100 / 1000 [ 10%]  (Warmup)\nChain 1: Iteration: 200 / 1000 [ 20%]  (Warmup)\nChain 1: Iteration: 300 / 1000 [ 30%]  (Warmup)\nChain 1: Iteration: 400 / 1000 [ 40%]  (Warmup)\nChain 1: Iteration: 500 / 1000 [ 50%]  (Warmup)\nChain 1: Iteration: 501 / 1000 [ 50%]  (Sampling)\nChain 1: Iteration: 600 / 1000 [ 60%]  (Sampling)\nChain 1: Iteration: 700 / 1000 [ 70%]  (Sampling)\nChain 1: Iteration: 800 / 1000 [ 80%]  (Sampling)\nChain 1: Iteration: 900 / 1000 [ 90%]  (Sampling)\nChain 1: Iteration: 1000 / 1000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 162.258 seconds (Warm-up)\nChain 1:                196.446 seconds (Sampling)\nChain 1:                358.704 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'prophet' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 0.000406 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 4.06 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:   1 / 1000 [  0%]  (Warmup)\nChain 2: Iteration: 100 / 1000 [ 10%]  (Warmup)\nChain 2: Iteration: 200 / 1000 [ 20%]  (Warmup)\nChain 2: Iteration: 300 / 1000 [ 30%]  (Warmup)\nChain 2: Iteration: 400 / 1000 [ 40%]  (Warmup)\nChain 2: Iteration: 500 / 1000 [ 50%]  (Warmup)\nChain 2: Iteration: 501 / 1000 [ 50%]  (Sampling)\nChain 2: Iteration: 600 / 1000 [ 60%]  (Sampling)\nChain 2: Iteration: 700 / 1000 [ 70%]  (Sampling)\nChain 2: Iteration: 800 / 1000 [ 80%]  (Sampling)\nChain 2: Iteration: 900 / 1000 [ 90%]  (Sampling)\nChain 2: Iteration: 1000 / 1000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 157.63 seconds (Warm-up)\nChain 2:                205.149 seconds (Sampling)\nChain 2:                362.779 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'prophet' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 0.000426 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 4.26 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:   1 / 1000 [  0%]  (Warmup)\nChain 3: Iteration: 100 / 1000 [ 10%]  (Warmup)\nChain 3: Iteration: 200 / 1000 [ 20%]  (Warmup)\nChain 3: Iteration: 300 / 1000 [ 30%]  (Warmup)\nChain 3: Iteration: 400 / 1000 [ 40%]  (Warmup)\nChain 3: Iteration: 500 / 1000 [ 50%]  (Warmup)\nChain 3: Iteration: 501 / 1000 [ 50%]  (Sampling)\nChain 3: Iteration: 600 / 1000 [ 60%]  (Sampling)\nChain 3: Iteration: 700 / 1000 [ 70%]  (Sampling)\nChain 3: Iteration: 800 / 1000 [ 80%]  (Sampling)\nChain 3: Iteration: 900 / 1000 [ 90%]  (Sampling)\nChain 3: Iteration: 1000 / 1000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 170.282 seconds (Warm-up)\nChain 3:                206.77 seconds (Sampling)\nChain 3:                377.052 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'prophet' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 0.000809 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 8.09 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:   1 / 1000 [  0%]  (Warmup)\nChain 4: Iteration: 100 / 1000 [ 10%]  (Warmup)\nChain 4: Iteration: 200 / 1000 [ 20%]  (Warmup)\nChain 4: Iteration: 300 / 1000 [ 30%]  (Warmup)\nChain 4: Iteration: 400 / 1000 [ 40%]  (Warmup)\nChain 4: Iteration: 500 / 1000 [ 50%]  (Warmup)\nChain 4: Iteration: 501 / 1000 [ 50%]  (Sampling)\nChain 4: Iteration: 600 / 1000 [ 60%]  (Sampling)\nChain 4: Iteration: 700 / 1000 [ 70%]  (Sampling)\nChain 4: Iteration: 800 / 1000 [ 80%]  (Sampling)\nChain 4: Iteration: 900 / 1000 [ 90%]  (Sampling)\nChain 4: Iteration: 1000 / 1000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 161.36 seconds (Warm-up)\nChain 4:                198.965 seconds (Sampling)\nChain 4:                360.325 seconds (Total)\nChain 4: \n```\n\n\n:::\n\n```{.r .cell-code}\nforecast_lockdown <- predict(m_lockdown, future_lockdowns)\nprophet_plot_components(m_lockdown, forecast_lockdown)\n```\n\n::: {.cell-output-display}\n![](03_time_series_analysis_files/figure-html/model-with-lockdown-regressors-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nregressor_coefficients(m_lockdown)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   regressor regressor_mode center  coef_lower        coef coef_upper\n1 lockdown_1 multiplicative      0 -0.26975349 -0.07451207  0.1274687\n2 lockdown_2 multiplicative      0  0.10940178  0.31982587  0.5288612\n3 lockdown_3 multiplicative      0 -0.07090555  0.11890732  0.3141606\n4 lockdown_4 multiplicative      0  0.08677928  0.25634606  0.4312443\n```\n\n\n:::\n:::\n",
    "supporting": [
      "03_time_series_analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}